import pymongo
import csv
from datetime import datetime, timedelta
import sys
import getopt

def generate_unique_data_report(mongo_uri, database_name, collection1_name, collection2_name, fromdate1, fromdate2):
    try:
        # Connect to MongoDB
        client = pymongo.MongoClient(mongo_uri)
        db = client[database_name]

        # Define the collections
        collection1 = db[collection1_name]
        collection2 = db[collection2_name]

        # Define the time ranges
        now = datetime.now()
        fromdate1 = now - timedelta(hours=fromdate1)
        fromdate2 = now - timedelta(hours=fromdate2)

        # Query collection1 for data updated in the last fromdate1 hours
        query1 = {"updatedTs": {"$gt": fromdate1}}
        cursor1 = collection1.find(query1)

        # Query collection2 for data inserted in the last fromdate2 hours
        query2 = {"join_date": {"$gt": fromdate2}}
        cursor2 = collection2.find(query2)

        # Create a list of IDs from collection1 that are not in collection2
        unique_data = []
        for data in cursor1:
            data_id = data.get("ID_ABC")
            join_date = data.get("join_date")
            if data_id is not None and join_date is not None:
                data_in_collection2 = collection2.find_one({"ID_ABC": data_id, "join_date": join_date})
                if data_in_collection2 is None:
                    unique_data.append({"ID_ABC": data_id, "join_date": join_date})

        # Write the unique data to a CSV file
        csv_file = "unique_data_report.csv"
        with open(csv_file, mode="w", newline="") as file:
            writer = csv.DictWriter(file, fieldnames=["ID_ABC", "join_date"])
            writer.writeheader()
            for data in unique_data:
                writer.writerow(data)

        print("Report generated successfully in", csv_file)
    
    except pymongo.errors.ConnectionFailure as e:
        print("Connection to MongoDB failed:", e)
    
    except Exception as e:
        print("An error occurred:", e)

def main(argv):
    mongo_uri = ''
    database_name = ''
    collection1_name = ''
    collection2_name = ''
    fromdate1 = None
    fromdate2 = None

    try:
        opts, args = getopt.getopt(argv,"hu:d:c:p:f:g:",["uri=","database=","collection1=","collection2=","fromdate1=","fromdate2="])
    except getopt.GetoptError:
        print('Usage: script.py -u <MongoDB URI> -d <database> -c <collection1> -p <collection2> -f <fromdate1> -g <fromdate2>')
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print('Usage: script.py -u <MongoDB URI> -d <database> -c <collection1> -p <collection2> -f <fromdate1> -g <fromdate2>')
            sys.exit()
        elif opt in ("-u", "--uri"):
            mongo_uri = arg
        elif opt in ("-d", "--database"):
            database_name = arg
        elif opt in ("-c", "--collection1"):
            collection1_name = arg
        elif opt in ("-p", "--collection2"):
            collection2_name = arg
        elif opt in ("-f", "--fromdate1"):
            fromdate1 = float(arg)
        elif opt in ("-g", "--fromdate2"):
            fromdate2 = float(arg)

    if not all([mongo_uri, database_name, collection1_name, collection2_name, fromdate1, fromdate2]):
        print('All parameters are required')
        sys.exit(2)

    generate_unique_data_report(mongo_uri, database_name, collection1_name, collection2_name, fromdate1, fromdate2)

if __name__ == "__main__":
    main(sys.argv[1:])
