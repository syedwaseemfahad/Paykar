import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ObjectValueComparator {
    private int numericPrecision = 3; // Default precision

    public ObjectValueComparator(int numericPrecision) {
        this.numericPrecision = numericPrecision;
    }

    public boolean objectsHaveSameValue(Object newValue, Object oldValue) {
        if (newValue == null && oldValue == null) {
            return true; // Both values are null, consider them equal
        } else if (newValue == null || oldValue == null) {
            return false; // One value is null, the other is not; consider them different
        }

        if (isNumeric(newValue) && isNumeric(oldValue)) {
            BigDecimal bd1 = toBigDecimal(newValue).setScale(numericPrecision, BigDecimal.ROUND_HALF_UP);
            BigDecimal bd2 = toBigDecimal(oldValue).setScale(numericPrecision, BigDecimal.ROUND_HALF_UP);
            return bd1.compareTo(bd2) == 0;
        } else if (isString(newValue) && isString(oldValue)) {
            String str1 = removeLeadingTrailingWhitespace(newValue.toString()).replaceAll("\\.0+$", "");
            String str2 = removeLeadingTrailingWhitespace(oldValue.toString()).replaceAll("\\.0+$", "");
            return str1.equals(str2);
        } else if (isDate(newValue) && isDate(oldValue)) {
            return newValue.equals(oldValue);
        } else {
            String str1 = newValue.toString();
            String str2 = oldValue.toString();
            return str1.equals(str2);
        }
    }

    private static boolean isNumeric(Object obj) {
        return obj instanceof Number || obj instanceof String && isNumericString((String) obj);
    }

    private static boolean isString(Object obj) {
        return obj instanceof String;
    }

    private static boolean isDate(Object obj) {
        return obj instanceof Date;
    }

    private static boolean isNumericString
